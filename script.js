class MMU {
    constructor() {
        this.bios = [
            0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E, 0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0, 0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A,
            0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B, 0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9, 0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
            0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04, 0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2, 0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62,
            0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06, 0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20, 0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
            0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B, 0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E, 0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99,
            0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC, 0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C, 0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
            0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50, 0x00
        ];
        // romBank00;
    };
};

mmu = new MMU();

const a = 'a';
const b = 'b';
const c = 'c';
const d = 'd';
const e = 'e';
const f = 'f';
const h = 'h';
const l = 'l';
const af = 'AF';
const bc = 'BC';
const de = 'DE';
const hl = 'HL';

const ZERO = 7;
const NEGATIVE = 6;
const HALF_CARRY = 5;
const CARRY = 4;

class CPU {
    constructor() {
        this.mmu = mmu;
        this.OC = 0;
    };

    reg = {
        a: 0,
        b: 0,
        c: 0,
        d: 0,
        e: 0,
        f: 0,
        h: 0,
        l: 0,
        SP: 0,
        PC: 0,

        // get A() { return this.a},
        // set A(u8) { this.a = u8 },

        // get B() { return this.b },
        // set B(u8) { this.b = u8 },

        // set C(u8) { this.c = u8 },
        // get C() { return this.c },

        // get D() { return this.d },
        // set D(u8) { this.d = u8 },

        // get E() { return this.e },
        // set E(u8) { this.e = u8 },

        // get H() { return this.h },
        // set H(u8) { this.h = value },

        // get L() { return this.l },
        // set L(u8) { this.l = u8 },

        get AF() { return this.a << 8 | this.f },
        set AF(u16) { [this.f, this.a] = [(u16 & 0xFF), (u16 >> 8)] },
        get BC() { return this.b << 8 | this.c },
        set BC(u16) { [this.c, this.b] = [(u16 & 0xFF), (u16 >> 8)] },
        get DE() { return this.d << 8 | this.e },
        set DE(u16) { [this.e, this.d] = [(u16 & 0xFF), (u16 >> 8)] },
        get HL() { return this.h << 8 | this.l },
        set HL(u16) { [this.l, this.h] = [(u16 & 0xFF), (u16 >> 8)] },
    };

    writeR = (register, value) => this.reg[register] = value;
    readR = (register) => this.reg[register];

    setFlag(bit, condition) {
		this.reg.f = (this.reg.f & ~(1 << bit)) | (condition << bit);
	};

    nextByte = () => this.mmu.bios[this.reg.PC++];
    nextWord = () => this.mmu.bios[this.reg.PC++] | this.mmu.bios[this.reg.PC++] << 8;

    xor = (u8) => { this.reg.a ^= u8 & 0xFF
                    this.reg.f  = ( u8 === 0) ? 0x80 : 0x00};

    tick() {
        this.OC = this.nextByte();
        console.log(this.OC.toString(16));
        this.instructions[this.OC]();
    }

    instructions = {
        0x00: () => console.log('NOP'),
        0x21: () => { cpu.reg.HL = this.nextWord()},
        0x31: () => { cpu.reg.SP = this.nextWord()},
        0xAF: () => this.xor(this.reg.a),
    };



};

function updateDebug() {
    document.getElementById("pc").innerHTML = 'PC: 0x' + cpu.reg.PC.toString(16);
    document.getElementById("af").innerHTML = 'AF: 0x' + cpu.reg.AF.toString(16);
    document.getElementById("bc").innerHTML = 'BC: 0x' + cpu.reg.BC.toString(16);
    document.getElementById("de").innerHTML = 'DE: 0x' + cpu.reg.DE.toString(16);
    document.getElementById("hl").innerHTML = 'HL: 0x' + cpu.reg.HL.toString(16);
    document.getElementById("sp").innerHTML = 'SP: 0x' + cpu.reg.SP.toString(16);
};



cpu = new CPU();

console.log(cpu.reg)
cpu.writeR(af, 0xFFFF);
console.log(cpu.readR(af));
console.log(cpu.reg);

function tick() {
    cpu.tick();
    updateDebug();
}